cscope 15 $HOME/data/CON100/carman -q 0000000394 0000033550
	@Ulist.h

1 #i‚de‡
_ULIST_H_


2 
	#_ULIST_H_


	)

4 
	#MAX_SUBSCRIBER
 10000

	)

6 
	#CARD_VAL_MASK
 (0x80)

	)

7 
	#CARD_TMP_MASK
 (0x01)

	)

9 
	sSubs¸ibî_èg


11 
	mdwC¨dNo
;

12 
	mucFœgs
;

13 }
	tSubs¸ibî_T
;

15 
RódLi°FromFûe
();

16 
GëLi°Vîsi⁄
();

17 
RebuûdLi°
();

18 
ModifySubs¸ibî
(
dwC¨dNo
, 
ucVÆid
, 
ucTmp
);

19 
WrôeLi°ToFûe
();

20 
Re£tLi°
();

21 
Subs¸ibî_T
* 
GëSubs¸ibî
(
dwC¨dNo
);

	@codec.c

1 
	~<°rög.h
>

2 
	~"codec.h
"

4 
	$PutDw‹d
(* 
pW‹k
, 
dwD©a
)

6 *
pW‹k
 = 
dwD©a
 >> 24;

7 
pW‹k
++;

8 *
pW‹k
 = (
dwD©a
 >> 16) & 0xFF;;

9 
pW‹k
++;

10 *
pW‹k
 = (
dwD©a
 >> 8) & 0xFF;

11 
pW‹k
++;

12 *
pW‹k
 = 
dwD©a
 & 0xFF;

13 
	}
}

15 
	$GëDw‹d
(c⁄° * 
pW‹k
)

17 
dwD©a
;

18 
dwD©a
 = *
pW‹k
;

19 
dwD©a
 <<= 8;

20 
pW‹k
++;

21 
dwD©a
 |*
pW‹k
;

22 
dwD©a
 <<= 8;

23 
pW‹k
++;

24 
dwD©a
 |*
pW‹k
;

25 
dwD©a
 <<= 8;

26 
pW‹k
++;

27 
dwD©a
 |*
pW‹k
;

28  
dwD©a
;

29 
	}
}

32 
	$A1Encode
(*
buff
, *
Àngth
, c⁄° 
A1Msg_T
* 
pMsg
)

34 *
pW‹k
;

36 i‡(
pMsg
->
tHótBót
.
ucVîsi⁄
 != 0x10)

37  
A1_ERROR_VERSION
;

38 i‡(*
Àngth
 < 4)

39  
A1_BUFF_SHORTAGE
;

40 
pW‹k
 = 
buff
;

41 *
pW‹k
 = 
pMsg
->
tHótBót
.
ucVîsi⁄
;

42 
pW‹k
++;

43 *
pW‹k
 = 
pMsg
->
tHótBót
.
ucSour˚
;

44 
pW‹k
++;

45 *
pW‹k
 = 
pMsg
->
tHótBót
.
ucTy≥
;

46 
pW‹k
++;

47 
pMsg
->
tHótBót
.
ucTy≥
) {

48 
HEART_BEAT_REQ
:

49 
HEART_BEAT_ACK
:

50 
SET_CLOCK_ACK
:

51 
CARD_PRESENT_ACK
:

52 
GATE_OPEN_REQ
:

53 
GATE_OPEN_ACK
:

54 
LIST_VERSION_INQ
:

55 
LIST_VERSION_ACK
:

56 
LIST_RESET_REQ
:

57 
LIST_RESET_ACK
:

58 
LED_SHOW_ACK
:

59 
RESET_REQ
:

60 
RESET_ACK
:

61 
LIST_MODIFY_ACK
:

63 
SET_CLOCK_REQ
:

64 i‡(*
Àngth
 < 10)

65  
A1_BUFF_SHORTAGE
;

66 
	`mem˝y
(
pW‹k
, &((
SëClockReq_T
*)
pMsg
)->
tTime
, (
A1Time_T
));

67 
pW‹k
 +(
A1Time_T
);

69 
CARD_PRESENT_REQ
:

70 i‡(*
Àngth
 < 9)

71  
A1_BUFF_SHORTAGE
;

72 *
pW‹k
 = ((
C¨dPª£¡Req_T
*)
pMsg
)->
ucLowB©ãry
 ? 1 : 0;

73 
pW‹k
++;

74 
	`PutDw‹d
(
pW‹k
, ((
C¨dPª£¡Req_T
*)
pMsg
)->
dwC¨dNo
);

75 
pW‹k
 += 4;

77 
LIST_VERSION_RSP
:

78 
LIST_VERSION_REQ
:

79 i‡(*
Àngth
 < 8)

80  
A1_BUFF_SHORTAGE
;

81 
	`PutDw‹d
(
pW‹k
, ((
Li°VîR•_T
*)
pMsg
)->
dwLi°Vîsi⁄
);

82 
pW‹k
 += 4;

84 
LIST_MODIFY_REQ
: {

85 
iRec‹d
;

86 
C¨dInfo_T
 *
pC¨dInfo
;

87 i‡(*
Àngth
 < 5 + 5 * (((
Li°ModifyReq_T
*)
pMsg
)->
ucRec‹dNum
))

88  
A1_BUFF_SHORTAGE
;

89 *
pW‹k
 = ((
Li°ModifyReq_T
*)
pMsg
)->
ucRec‹dNum
;

90 
pW‹k
++;

91 
pC¨dInfo
 = ((
Li°ModifyReq_T
*)
pMsg
)->
tC¨dInfo
;

92 
iRec‹d
 = 0; iRec‹d < ((
Li°ModifyReq_T
*)
pMsg
)->
ucRec‹dNum
; iRecord++) {

93 *
pW‹k
 = 
pC¨dInfo
->
ucVÆid
 ? 0x80 : 0;

94 *
pW‹k
 |
pC¨dInfo
->
ucTmp
 ? 0x01 : 0;

95 
pW‹k
++;

96 
	`PutDw‹d
(
pW‹k
, 
pC¨dInfo
->
dwC¨dNo
);

97 
pW‹k
+=4;

98 
pC¨dInfo
++;

102 
OFFLINE_TRAN_REQ
:

103 i‡(*
Àngth
 < 15)

104  
A1_BUFF_SHORTAGE
;

105 *
pW‹k
 = ((
OffLöeTønsReq_T
*)
pMsg
)->
ucTønsId
;

106 
pW‹k
++;

107 
	`PutDw‹d
(
pW‹k
, ((
OffLöeTønsReq_T
*)
pMsg
)->
dwC¨dNo
);

108 
pW‹k
 += 4;

109 
	`mem˝y
(
pW‹k
, &((
OffLöeTønsReq_T
*)
pMsg
)->
tTime
, (
A1Time_T
));

110 
pW‹k
 +(
A1Time_T
);

112 
OFFLINE_TRAN_ACK
:

113 
VEHICLE_PRESENT_REQ
:

114 
VEHICLE_PRESENT_ACK
:

115 i‡(*
Àngth
 < 5)

116  
A1_BUFF_SHORTAGE
;

117 *
pW‹k
 = ((
OffLöeTønsAck_T
*)
pMsg
)->
ucTønsId
;

118 
pW‹k
++;

120 
LED_SHOW_REQ
: {

121 
iSåLí
;

122 
iSåLí
 = 
	`°æí
(((
LedShowReq_T
*)
pMsg
)->
szShow
) + 1;

123 i‡(*
Àngth
 < 4 + 
iSåLí
)

124  
A1_BUFF_SHORTAGE
;

125 
	`mem˝y
(
pW‹k
, ((
LedShowReq_T
*)
pMsg
)->
szShow
, 
iSåLí
);

126 
pW‹k
 +
iSåLí
;

130  
A1_ERROR_TYPE
;

132 *
pW‹k
 = 0;

133 
pW‹k
++;

134 *
Àngth
 = ()(
pW‹k
 - 
buff
);

135  
A1_ERROR_OK
;

136 
	}
}

139 
	$A1Decode
(c⁄° *
buff
, 
Àngth
, 
A1Msg_T
* 
pMsg
)

141 c⁄° *
pW‹k
;

143 i‡(*
buff
 != 0x10)

144  
A1_ERROR_VERSION
;

145 i‡(
Àngth
 < 4)

146  
A1_BUFF_SHORTAGE
;

148 
pW‹k
 = 
buff
;

149 
pMsg
->
tHótBót
.
ucVîsi⁄
 = *
pW‹k
;

150 
pW‹k
++;

151 
pMsg
->
tHótBót
.
ucSour˚
 = *
pW‹k
;

152 
pW‹k
++;

153 
pMsg
->
tHótBót
.
ucTy≥
 = *
pW‹k
;

154 
pW‹k
++;

155 
pMsg
->
tHótBót
.
ucTy≥
) {

156 
HEART_BEAT_REQ
:

157 
HEART_BEAT_ACK
:

158 
SET_CLOCK_ACK
:

159 
CARD_PRESENT_ACK
:

160 
GATE_OPEN_REQ
:

161 
GATE_OPEN_ACK
:

162 
LIST_VERSION_INQ
:

163 
LIST_VERSION_ACK
:

164 
LIST_RESET_REQ
:

165 
LIST_RESET_ACK
:

166 
LED_SHOW_ACK
:

167 
RESET_REQ
:

168 
RESET_ACK
:

169 
LIST_MODIFY_ACK
:

171 
SET_CLOCK_REQ
:

172 i‡(
Àngth
 < 10)

173  
A1_BUFF_SHORTAGE
;

174 
	`mem˝y
(&((
SëClockReq_T
*)
pMsg
)->
tTime
, 
pW‹k
, (
A1Time_T
));

175 
pW‹k
 +(
A1Time_T
);

177 
CARD_PRESENT_REQ
:

178 i‡(
Àngth
 < 9)

179  
A1_BUFF_SHORTAGE
;

180 ((
C¨dPª£¡Req_T
*)
pMsg
)->
ucLowB©ãry
 = *
pW‹k
 & 0x01;

181 
pW‹k
++;

182 ((
C¨dPª£¡Req_T
*)
pMsg
)->
dwC¨dNo
 = 
	`GëDw‹d
(
pW‹k
);

183 
pW‹k
 += 4;

185 
LIST_VERSION_RSP
:

186 
LIST_VERSION_REQ
:

187 i‡(
Àngth
 < 8)

188  
A1_BUFF_SHORTAGE
;

189 ((
Li°VîR•_T
*)
pMsg
)->
dwLi°Vîsi⁄
 = 
	`GëDw‹d
(
pW‹k
);

190 
pW‹k
 += 4;

192 
LIST_MODIFY_REQ
: {

193 
iRec‹d
;

194 
C¨dInfo_T
 *
pC¨dInfo
;

195 ((
Li°ModifyReq_T
*)
pMsg
)->
ucRec‹dNum
 = *
pW‹k
;

196 
pW‹k
++;

197 i‡(
Àngth
 < 5 + 5 * (((
Li°ModifyReq_T
*)
pMsg
)->
ucRec‹dNum
))

198  
A1_BUFF_SHORTAGE
;

199 
pC¨dInfo
 = ((
Li°ModifyReq_T
*)
pMsg
)->
tC¨dInfo
;

200 
iRec‹d
 = 0; iRec‹d < ((
Li°ModifyReq_T
*)
pMsg
)->
ucRec‹dNum
; iRecord++) {

201 
pC¨dInfo
->
ucVÆid
 = (*
pW‹k
 & 0x80) ? 1 : 0;

202 
pC¨dInfo
->
ucTmp
 = (*
pW‹k
 & 0x01) ? 1 : 0;

203 
pW‹k
++;

204 
pC¨dInfo
->
dwC¨dNo
 = 
	`GëDw‹d
(
pW‹k
);

205 
pW‹k
+=4;

206 
pC¨dInfo
++;

210 
OFFLINE_TRAN_REQ
:

211 i‡(
Àngth
 < 15)

212  
A1_BUFF_SHORTAGE
;

213 ((
OffLöeTønsReq_T
*)
pMsg
)->
ucTønsId
 = *
pW‹k
;

214 
pW‹k
++;

215 ((
OffLöeTønsReq_T
*)
pMsg
)->
dwC¨dNo
 = 
	`GëDw‹d
(
pW‹k
);

216 
pW‹k
 += 4;

217 
	`mem˝y
(&((
OffLöeTønsReq_T
*)
pMsg
)->
tTime
, 
pW‹k
, (
A1Time_T
));

218 
pW‹k
 +(
A1Time_T
);

220 
OFFLINE_TRAN_ACK
:

221 
VEHICLE_PRESENT_REQ
:

222 
VEHICLE_PRESENT_ACK
:

223 i‡(
Àngth
 < 5)

224  
A1_BUFF_SHORTAGE
;

225 ((
OffLöeTønsAck_T
*)
pMsg
)->
ucTønsId
 = *
pW‹k
;

226 
pW‹k
++;

228 
LED_SHOW_REQ
: {

229 
iSåLí
;

230 
iSåLí
 = 
	`°æí
(
pW‹k
) + 1;

231 i‡((
Àngth
 < 4 + 
iSåLí
Ë|| (iSåLí > 
MAX_SHOW_LENGTH
 + 1))

232  
A1_BUFF_SHORTAGE
;

233 
	`mem˝y
(((
LedShowReq_T
*)
pMsg
)->
szShow
, 
pW‹k
, 
iSåLí
);

234 
pW‹k
 +
iSåLí
;

238  
A1_ERROR_TYPE
;

240  
A1_ERROR_OK
;

241 
	}
}

	@codec.h

1 #i‚de‡
_CODEC_H_


2 
	#_CODEC_H_


	)

5 
	#A1_ERROR_OK
 0

	)

6 
	#A1_ERROR_UNKNOW
 1

	)

7 
	#A1_ERROR_CRC
 2

8 
	#A1_ERROR_VERSION
 3

9 
	#A1_ERROR_TYPE
 4

10 
	#A1_BUFF_SHORTAGE
 5

11 

	)

12 
	#HEART_BEAT_REQ
 (0x01)

	)

13 
	#HEART_BEAT_ACK
 (0x02)

	)

14 
	#SET_CLOCK_REQ
 (0x03)

	)

15 
	#SET_CLOCK_ACK
 (0x04)

	)

16 
	#CARD_PRESENT_REQ
 (0x05)

	)

17 
	#CARD_PRESENT_ACK
 (0x06)

	)

18 
	#GATE_OPEN_REQ
 (0x07)

	)

19 
	#GATE_OPEN_ACK
 (0x08)

	)

20 
	#LIST_VERSION_INQ
 (0x09)

	)

21 
	#LIST_VERSION_RSP
 (0x0A)

	)

22 
	#LIST_VERSION_REQ
 (0x0B)

	)

23 
	#LIST_VERSION_ACK
 (0x0C)

	)

24 
	#LIST_RESET_REQ
 (0x0D)

	)

25 
	#LIST_RESET_ACK
 (0x0E)

	)

26 
	#LIST_MODIFY_REQ
 (0x0F)

	)

27 
	#LIST_MODIFY_ACK
 (0x10)

	)

28 
	#OFFLINE_TRAN_REQ
 (0x11)

	)

29 
	#OFFLINE_TRAN_ACK
 (0x12)

	)

30 
	#VEHICLE_PRESENT_REQ
 (0x13)

	)

31 
	#VEHICLE_PRESENT_ACK
 (0x14)

	)

32 
	#LED_SHOW_REQ
 (0x15)

	)

33 
	#LED_SHOW_ACK
 (0x16)

	)

34 
	#RESET_REQ
 (0x17)

	)

35 
	#RESET_ACK
 (0x18)

	)

37 
	#MAX_LIST_RECORD
 (256)

	)

38 
	#MAX_SHOW_LENGTH
 (32)

	)

40 
	sA1Time_èg


42 
	mucYór
;

43 
	mucM⁄th
;

44 
	mucDay
;

45 
	mucHour
;

46 
	mucMöuã
;

47 
	mucSec⁄d
;

48 }
	tA1Time_T
;

50 
	sC¨dInfo_èg


52 
	mucVÆid
;

53 
	mucTmp
;

54 
	mdwC¨dNo
;

55 }
	tC¨dInfo_T
;

59 
	sHóπBótReq_èg


61 
	mucVîsi⁄
;

62 
	mucSour˚
;

63 
	mucTy≥
;

64 }
	tHóπBótReq_T
,
	tHóπBótAck_T
,
	tSëClockAck_T
,
	tC¨dPª£¡Ack_t
,
	tG©eO≥nReq_T


65 ,
	tG©eO≥nAck_T
,
	tLi°VîInq_T
,
	tLi°VîAck_T
,
	tLi°Re£tReq_T
,
	tLi°Re£tAck_T


66 ,
	tLi°ModifyAck_T
,
	tLedShowAck_T


67 ,
	tRe£tReq_T
,
	tRe£tAck_T
;

69 
	sSëClockReq_èg


71 
	mucVîsi⁄
;

72 
	mucSour˚
;

73 
	mucTy≥
;

74 
A1Time_T
 
	mtTime
;

75 }
	tSëClockReq_T
;

77 
	sC¨dPª£¡Req_èg


79 
	mucVîsi⁄
;

80 
	mucSour˚
;

81 
	mucTy≥
;

82 
	mucLowB©ãry
;

83 
	mdwC¨dNo
;

84 }
	tC¨dPª£¡Req_T
;

86 
	sLi°VîInq_èg


88 
	mucVîsi⁄
;

89 
	mucSour˚
;

90 
	mucTy≥
;

91 
	mdwLi°Vîsi⁄
;

92 }
	tLi°VîR•_T
,
	tLi°Vîsi⁄Req_T
;

94 
	sLi°ModifyReq_èg


96 
	mucVîsi⁄
;

97 
	mucSour˚
;

98 
	mucTy≥
;

99 
	mucRec‹dNum
;

100 
C¨dInfo_T
 
	mtC¨dInfo
[
MAX_LIST_RECORD
];

101 }
	tLi°ModifyReq_T
;

103 
	sOffLöeTønsReq_èg


105 
	mucVîsi⁄
;

106 
	mucSour˚
;

107 
	mucTy≥
;

108 
	mucTønsId
;

109 
	mdwC¨dNo
;

110 
A1Time_T
 
	mtTime
;

111 }
	tOffLöeTønsReq_T
,
	tVehi˛ePª£¡Req_T
,
	tVehi˛ePª£¡Ack_T
;

113 
	sOffLöeTønsAck_èg


115 
	mucVîsi⁄
;

116 
	mucSour˚
;

117 
	mucTy≥
;

118 
	mucTønsId
;

119 }
	tOffLöeTønsAck_T
;

121 
	sLedShowReq_èg


123 
	mucVîsi⁄
;

124 
	mucSour˚
;

125 
	mucTy≥
;

126 
	mszShow
[
MAX_SHOW_LENGTH
 + 1];

127 }
	tLedShowReq_T
;

131 
HóπBótReq_èg
 
	mtHótBót
;

132 
SëClockReq_èg
 
	mtSëClockReq
;

133 
C¨dPª£¡Req_èg
 
	mtC¨dPª£¡Req
;

134 
Li°VîInq_èg
 
	mtLi°VîInq
;

135 
Li°ModifyReq_èg
 
	mtLi°ModifyReq
;

136 
OffLöeTønsReq_èg
 
	mtOffLöeTønsReq
;

137 
OffLöeTønsAck_èg
 
	mtOffLöeTønsAck
;

138 
LedShowReq_èg
 
	mtLedShowReq
;

139 }
	tA1Msg_T
;

141 
A1Encode
(*
buff
, *
Àngth
, c⁄° 
A1Msg_T
* 
pMsg
);

142 
A1Decode
(c⁄° *
buff
, 
Àngth
, 
A1Msg_T
* 
pMsg
);

	@display.c

8 
	~<sys/ty≥s.h
>

9 
	~<sys/sockë.h
>

10 
	~<¨∑/öë.h
>

11 
	~<°dio.h
>

12 
	~<°rög.h
>

13 
	~<ãrmios.h
>

14 
	~<f˙é.h
>

15 
	~<uni°d.h
>

16 
	~"l‹dweb.h
"

19 
	#SCREEN_X
 64

20 
	#VIRTUAL_SCREEN_X
 128

21 
	#SCREEN_Y
 16

	)

22 
	#SCREEN_BUFF_SIZE
 (
VIRTUAL_SCREEN_X
 * 
SCREEN_Y
 / 8)

	)

23 
	#STARTPAUSETIME
 50

24 
	#STOPPAUSETIME
 80

25 
	#SHIFTTIME
 15

26 
	#SPACE
 4

27 

	)

29 
	gg_iS¸ìn
[
SCREEN_Y
][
VIRTUAL_SCREEN_X
/32];

30 
	gg_xPos
;

31 
size_t
 
	gg_iTextLí
;

32 
	gtimî
;

35 
	$Shi·h™d
(
d©a1
,
d©a2
)

37 
ãmp
;

38 *
±r
;

39 
i
;

40 
ãmpg_xpos
;

41 
ãmp
=()
d©a2
;

42 
ãmp
<<=32;

43 
ãmp
+=()
d©a1
;

44 
±r
=(*)&
ãmp
;

45 
ãmpg_xpos
=
g_xPos
%32;

46 
i
=0;i<4;i++)

48 *(
±r
+
ãmpg_xpos
/8+
i
)=(*(ptr+tempg_xpos/8+i)<<(tempg_xpos%8))+(*(ptr+tempg_xpos/8+1+i)>>(8-tempg_xpos%8));

50 
ãmp
Òemp>>((
ãmpg_xpos
/8)*8);

51  (
ãmp
&0x00000000ffffffff);

52 
	}
}

55 
	$FlushS¸ìn
()

57 
fd
;

58 
iRow
,
iCﬁum
;

59 
ãmpd©a
;

60 *
pByã
;

61 
timî
++;

62 if(
timî
==1)

64 
fd
=
	`›í
("/dev/Lord-Control",0);

65 if(
fd
<0){

66 
	`≥º‹
("open device Lord-Control");

69 
	`io˘l
(
fd
, 
LORD_SEEK_SET
, 0);

70 
iRow
 = 0; iRow < 
SCREEN_Y
; iRow++) {

71 
iCﬁum
 = 0; iCﬁum < 
SCREEN_X
/32; iColum++) {

72 
	`io˘l
(
fd
, 
LORD_WRITE
, 
g_iS¸ìn
[
iRow
][
iCﬁum
]);

75 
	`io˘l
(
fd
,
LORD_END_WRITE
,0);

76 
	`˛o£
(
fd
);

78 if(
timî
<
STARTPAUSETIME
)

82 if((((
timî
-
STARTPAUSETIME
)%
SHIFTTIME
)==0)&&—imî<(
g_iTextLí
+
SPACE
-8)*8*SHIFTTIME+STARTPAUSETIME))

84 if(
g_iTextLí
<=8)

88 
g_xPos
++;

89 
fd
=
	`›í
("/dev/Lord-Control",0);

90 if(
fd
<0){

91 
	`≥º‹
("open device Lord-Control");

94 
	`io˘l
(
fd
,
LORD_SEEK_SET
,0);

95 
iRow
 = 0; iRow < 
SCREEN_Y
; iRow++) {

96 
iCﬁum
 = 0; iCﬁum < 
SCREEN_X
/32; iColum++) {

97 if((
iCﬁum
+
g_xPos
/32+1)==
VIRTUAL_SCREEN_X
/32)

99 
ãmpd©a
=
	`Shi·h™d
(
g_iS¸ìn
[
iRow
][
iCﬁum
+
g_xPos
/32],0);

101 if((
iCﬁum
+
g_xPos
/32+1)>
VIRTUAL_SCREEN_X
/32)

103 
ãmpd©a
=
	`Shi·h™d
(0,0);

107 
ãmpd©a
=
	`Shi·h™d
(
g_iS¸ìn
[
iRow
][
iCﬁum
+
g_xPos
/32],g_iScreen[iRow][iColum+g_xPos/32+1]);

109 
	`io˘l
(
fd
, 
LORD_WRITE
, 
ãmpd©a
);

112 
	`io˘l
(
fd
,
LORD_END_WRITE
,0);

114 
	`˛o£
(
fd
);

116 if(
timî
<(((
g_iTextLí
+
SPACE
-8)*8*
SHIFTTIME
)+
STARTPAUSETIME
+
STOPPAUSETIME
))

122 
timî
=0;

123 
g_xPos
=0;

125 
	}
}

126 
	$Di•œy
(c⁄° * 
szText
)

128 
fd_ascii
,
fd_hzk16
;

129 
iRow
,
iCﬁum
;

130 *
pD©a
;

131 
off£t
;

132 c⁄° *
pText
;

134 
g_iTextLí
=
	`°æí
(
szText
);

135 
g_xPos
=0;

136 
timî
=0;

138 
	`mem£t
(
g_iS¸ìn
, 0, (g_iScreen));

140 
fd_ascii
 = -1;

141 
fd_hzk16
 = -1;

144 
pText
 = 
szText
;

145 
iCﬁum
 = 0; iCﬁum < 
VIRTUAL_SCREEN_X
/8; iColum++) {

146 i‡(*
pText
 == 0)

148 i‡((*
pText
 & 0x80) == 0) {

149 i‡(
fd_ascii
 < 0) {

150 
fd_ascii
 = 
	`›í
("ascii8_16.bö", 
O_RDONLY
);

151 i‡(
fd_ascii
 < 0) {

152 
	`≥º‹
("canÇot openáscii8_16.bin");

156 
off£t
 = (()(*
pText
 - ' ')) << 4;

157 
	`l£ek
(
fd_ascii
, 
off£t
, 
SEEK_SET
);

158 
pD©a
 = (*)&
g_iS¸ìn
[0][0];

159 
pD©a
 +
iCﬁum
;

160 
iRow
 = 0; iRow < 
SCREEN_Y
; iRow++) {

161 
	`ªad
(
fd_ascii
, 
pD©a
, 1);

162 
pD©a
 +
VIRTUAL_SCREEN_X
/8;

164 
pText
++;

167 i‡(
iCﬁum
 =
VIRTUAL_SCREEN_X
/8 - 2)

169 i‡(
fd_hzk16
 < 0) {

170 
fd_hzk16
 = 
	`›í
("hzk16.bö", 
O_RDONLY
);

171 i‡(
fd_hzk16
 < 0) {

172 
	`≥º‹
("canÇot open hzk16.bin");

176 
off£t
 = *(c⁄° *)
pText
;

177 
off£t
 = (offset - 0xA1) * 94;

178 
pText
++;

179 
off£t
 +*(c⁄° *)
pText
;

180 
off£t
 -= 0xA1;

181 
off£t
 <<= 5;

183 
	`l£ek
(
fd_hzk16
, 
off£t
, 
SEEK_SET
);

184 
pD©a
 = (*)&
g_iS¸ìn
[0][0];

185 
pD©a
 +
iCﬁum
;

186 
iRow
 = 0; iRow < 
SCREEN_Y
; iRow++) {

187 
	`ªad
(
fd_hzk16
, 
pD©a
, 2);

188 
pD©a
 +
VIRTUAL_SCREEN_X
/8;

190 
iCﬁum
++;

191 
pText
++;

196 i‡(
fd_ascii
 > 0)

197 
	`˛o£
(
fd_ascii
);

198 i‡(
fd_hzk16
 > 0)

199 
	`˛o£
(
fd_hzk16
);

206 
	}
}

	@dumplist.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

11 
	$maö
(
¨gc
, **
¨gv
)

13 
FILE
 *
pFûe
;

14 
dwVî
;

15 
dwRec‹d
;

16 
dwC¨dNo
;

17 
ucFÆg
;

19 
pFûe
 = 
	`f›í
("ulist.dat", "rb");

20 i‡(
pFûe
 == 0) {

21 
	`¥ötf
("FailÅo open ulist.dat\n");

25 i‡(
	`‰ód
(&
dwVî
, (), 1, 
pFûe
))

26 
	`¥ötf
("Li° vîsi⁄: %d\n", 
dwVî
);

27 
dwRec‹d
 = 0;

28 !
	`„of
(
pFûe
)) {

29 i‡(
	`‰ód
(&
dwC¨dNo
, (dwC¨dNo), 1, 
pFûe
) <= 0)

31 i‡(
	`‰ód
(&
ucFÆg
, (ucFÆg), 1, 
pFûe
) <= 0)

33 
dwRec‹d
++;

34 
	`¥ötf
("%04d:%06d:%02x\n", 
dwRec‹d
, 
dwC¨dNo
, 
ucFÆg
);

38 
	`f˛o£
(
pFûe
);

41 
	}
}

	@lordweb.h

1 #i‚de‡
_LORDWEB_H_


2 
	#_LORDWEB_H_


	)

4 
	#LORD_SEEK_SET
 (1)

5 
	#LORD_END_WRITE
 (2)

6 
	#LORD_WRITE
 (3)

7 
	#LORD_IO_WRITE
 (4)

	)

8 
	#LORD_VEHICLE_STAT
 (5)

9 

	)

10 
	#LORD_UP_ON
 (0x00000001)

	)

11 
	#LORD_UP_OFF
 (0x00000002)

	)

12 
	#LORD_DOWN_ON
 (0x00000004)

	)

13 
	#LORD_DOWN_OFF
 (0x00000008)

	)

14 
	#LORD_RS485_TX
 (0x00000010)

	)

15 
	#LORD_RS485_RX
 (0x00000020)

	)

	@main.c

9 
	~<sys/ty≥s.h
>

10 
	~<sys/sockë.h
>

11 
	~<sys/time.h
>

12 
	~<¨∑/öë.h
>

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<°rög.h
>

16 
	~<ãrmios.h
>

17 
	~<f˙é.h
>

18 
	~<uni°d.h
>

19 
	~<time.h
>

20 
	~"l‹dweb.h
"

21 
	~"codec.h
"

22 
	~"misc.h
"

23 
	~"Uli°.h
"

26 
	#BUFLEN
 255

	)

27 
	#CARMAN_PORT
 10083

	)

28 
	#MAX_OFF_RECORD
 10000

	)

31 
	#TIMER_BASE
 (20)

32 

	)

33 
	#TIME_SUBSCRIBER
 (600)

35 
	#TIME_NO_VEHICLE
 (500)

37 
	#TIME_GATE_OPEN
 (1000)

38 
	#TIME_VP_REQ
 (100)

39 
	#TIME_CP_REQ
 (200)

40 
	#TIME_HEART_BEAT
 (5000)

41 

	)

42 
	#TIME_RESET
 
TIME_HEART_BEAT


43 
	#LINK_FAIL_TIMER
 (2 * 
TIME_HEART_BEAT
)

	)

44 
	#VEHICLE_PRSNT_TIMER
 (100)

	)

46 
	#INIT_MSG
(
msg
,
ty≥
) \

47 
	`mem£t
(&
msg
, 0, (msg));\

48 
msg
.
ucVîsi⁄
 = 0x10;\

49 
msg
.
ucSour˚
 = 
g_c⁄fig
.ucSource;\

50 
msg
.
ucTy≥
 = 
ty≥


	)

52 
	sOffRec‹d_èg


54 
	miSec
;

55 
	mdwC¨dNo
;

56 }
	tOffRec‹d_T
;

59 íum {
	mATUOTRUE
,
	mATUOFLASE
}
	tE_AtuoW‹k
;

62 íum{
	mREPORTTRUE
,
	mREPORTFLASE
}
	tE_Rï‹t
;

64 
	gs_dwOffRec‹d
;

65 
OffRec‹d_T
 
	gs_tOffRec‹d
[
MAX_OFF_RECORD
];

69 
Di•œy
(c⁄° * 
szText
);

70 
FlushS¸ìn
();

71 
›í_p‹t
(
p‹t_no
);

72 
£t_›t
(
fd
, 
nBôs
, 
nS≥ed
, 
nEvít
, 
nSt›
);

77 
	mucSour˚
;

78 
E_AtuoW‹k
 
	m©uoÊag
;

79 
E_Rï‹t
 
	mªp‹tÊag
;

80 
sockaddr_ö
 
	m≥îaddr
;

81 
sockaddr_ö
 
	mloˇœddr
;

82 }
	gg_c⁄fig
;

85 
	$RódC⁄figuªFûe
()

87 
FILE
 *
fûe
;

88 
size_t
 
Àn
;

89 
i
;

90 
j
;

91 *
±r
;

92 
buf
[128];

93 
fûe
=
	`f›í
("/etc/carman.conf","r");

94 if(
fûe
==
NULL
)

96 
	`≥º‹
("haveÇo carman.conf file or openÅhisÉrror.\n");

97 
	`≥º‹
("we will use default configure:\n");

98 
	`≥º‹
("device id = 100\n");

99 
	`≥º‹
("notÇetátuo work = TRUE\n");

100 
	`≥º‹
("only card signalÑeport = TRUE\n");

101 
	`≥º‹
("server ip = 192.168.1.120\n");

102 
	`≥º‹
("local ip = 192.168.1.121\n");

103 
g_c⁄fig
.
ucSour˚
=100;

104 
g_c⁄fig
.
©uoÊag
=
ATUOTRUE
;

105 
g_c⁄fig
.
ªp‹tÊag
=
REPORTTRUE
;

106 
	`öë_±⁄
(
AF_INET
,"192.168.1.120",&
g_c⁄fig
.
≥îaddr
.
sö_addr
);

107 
	`öë_±⁄
(
AF_INET
,"192.168.1.121",&
g_c⁄fig
.
loˇœddr
.
sö_addr
);

110 !
	`„of
(
fûe
))

112 
	`mem£t
(
buf
,128,0);

113 i‡(!
	`fgës
(
buf
,128,
fûe
))

117 if((
buf
[0]=='#')||(buf[0]=='\n'))

123 
Àn
=
	`°æí
(
buf
);

124 
i
=0;i<
Àn
;i++)

126 if((
buf
[
i
]==' ')||(buf[i]=='\t'))

128 
j
=
i
;j<
Àn
;j++)

130 
buf
[
j
]=buf[j+1];

132 
i
--;

135 
Àn
=
	`°æí
(
buf
);

136 if(
buf
[
Àn
-1]=='\n')

138 
buf
[
Àn
-1]='\0';

140 
i
=0;i<
Àn
;i++)

142 if((
buf
[
i
]>='A')&&(buf[i]<='Z'))

144 
buf
[
i
]=buf[i]+32;

147 i‡('\0' =
buf
[0])

151 
±r
=
	`°πok
(
buf
,"=");

152 if(!
	`°rcmp
("devi˚id",
±r
))

154 
g_c⁄fig
.
ucSour˚
=()
	`©oi
(
	`°πok
(
NULL
,"="));

156 if(!
	`°rcmp
("£rvîù",
±r
))

158 
	`öë_±⁄
(
AF_INET
,
	`°πok
(
NULL
,"="),&
g_c⁄fig
.
≥îaddr
.
sö_addr
);

160 if(!
	`°rcmp
("loˇlù",
±r
))

162 
	`öë_±⁄
(
AF_INET
,
	`°πok
(
NULL
,"="),&
g_c⁄fig
.
loˇœddr
.
sö_addr
);

164 if(!
	`°rcmp
("©uow‹k",
±r
))

166 if(!
	`°rcmp
("åue",
	`°πok
(
NULL
,"=")))

168 
g_c⁄fig
.
©uoÊag
=
ATUOTRUE
;

172 
g_c⁄fig
.
©uoÊag
=
ATUOFLASE
;

175 if(!
	`°rcmp
("©u‹ï‹t",
±r
))

177 if(!
	`°rcmp
("åue",
	`°πok
(
NULL
,"=")))

179 
g_c⁄fig
.
ªp‹tÊag
=
REPORTTRUE
;

183 
g_c⁄fig
.
ªp‹tÊag
=
REPORTFLASE
;

193 
	}
}

196 
	$SídMesßge
(c⁄° * 
pMsg
, 
sock
)

198 
ucBuff
[2048];

199 
iLígth
;

200 
iRv
;

202 
iLígth
 = (
ucBuff
);

203 i‡(
A1_ERROR_OK
 !
	`A1Encode
(
ucBuff
, &
iLígth
, (c⁄° 
A1Msg_T
*)
pMsg
))

207  
	`£ndto
(
sock
, 
ucBuff
, 
iLígth
, 0

208 , (
sockaddr
*)&
g_c⁄fig
.
≥îaddr


209 , (
sockaddr_ö
));

210 
	}
}

215 
	$maö
(
¨gc
, **
¨gv
)

217 
sockfd
;

218 
rs485_fd
;

219 
rx_buff
[256];

220 
nRód
;

221 
ucRe£tAckFœg
;

222 
ucC¨dAckFœg
;

223 
ucCurVehi˛es
;

224 
ucAckVehi˛es
;

225 
ucOffTønID
;

227 
dwTickCuºít
;

228 
dwTickVehi˛eOn
;

229 
dwTickC¨d
;

230 
dwTickVehi˛eReq
;

232 
dwTickTimî
;

233 
dwTickC¨dReq
;

235 
dwTickHóπbótReq
;

236 
dwTickHóπbótAck
;

237 
dwTickRe£tReq
;

238 
dwG©eO≥nReq
;

239 
dwCurC¨dNo
;

240 
A1Msg_T
 
tA1Msg
;

243 
s_dwOffRec‹d
 = 0;

246 
	`mem£t
(&
g_c⁄fig
, 0, (g_config));

248 
	`RódC⁄figuªFûe
();

251 
	`RódLi°FromFûe
();

254 
	`Di•œy
("\xBB\xB6\xD3\xAD\xB9\xE2\xC1\xD9 Ribeto");

256 
	`excuã_cmd
(
LORD_DOWN_ON
);

257 
	`excuã_cmd
(
LORD_UP_OFF
);

260 
sockfd
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

261 if(
sockfd
<0){

262 
	`≥º‹
("socket creatingÉrr in main\n");

265 
g_c⁄fig
.
≥îaddr
.
sö_Ámûy
=
AF_INET
;

266 
g_c⁄fig
.
≥îaddr
.
sö_p‹t
=
	`ht⁄s
(
CARMAN_PORT
);

267 
g_c⁄fig
.
loˇœddr
.
sö_Ámûy
=
AF_INET
;

268 
g_c⁄fig
.
loˇœddr
.
sö_p‹t
=
	`ht⁄s
(
CARMAN_PORT
);

269 if(
	`böd
(
sockfd
, (
sockaddr
*)&
g_c⁄fig
.
loˇœddr


270 , (
sockaddr_ö
))<0) {

271 
	`≥º‹
("bindÜocaláddressÉrr in main!\n");

276 
rs485_fd
 = 
	`›í_p‹t
(2);

277 i‡(
rs485_fd
 < 0)

279 
	`£t_›t
(
rs485_fd
, 8, 1200, 'N', 1);

282 
ucCurVehi˛es
 = 0;

283 
ucAckVehi˛es
 = -1;

284 
ucRe£tAckFœg
 = 0;

285 
ucC¨dAckFœg
 = 0;

286 
ucOffTønID
 = 0;

287 
dwCurC¨dNo
 = 0;

289 
dwTickCuºít
 = 
	`GëTicks
();

290 
dwTickVehi˛eOn
 = 
dwTickCuºít
 - 
TIME_NO_VEHICLE
;

291 
dwTickC¨d
 = 
dwTickCuºít
 - 
TIME_SUBSCRIBER
;

292 
dwTickVehi˛eReq
 = 
dwTickCuºít
 - 
TIME_VP_REQ
;

293 
dwTickHóπbótReq
 = 
dwTickCuºít
 - 
TIME_HEART_BEAT
;

294 
dwTickHóπbótAck
 = 
dwTickCuºít
;

295 
dwTickRe£tReq
 = 
dwTickCuºít
 - 
TIME_RESET
;

296 
dwTickC¨dReq
 = 
dwTickCuºít
 - 
TIME_CP_REQ
;

297 
dwG©eO≥nReq
 = 
dwTickCuºít
 - 
TIME_GATE_OPEN
;

298 
dwTickTimî
 = 
dwTickCuºít
 ;

301 
	`u¶ìp
(8000);

302 
dwTickCuºít
 = 
	`GëTicks
();

304 i‡(
	`ã°_vd108
()) {

305 i‡(
dwTickCuºít
 - 
dwTickVehi˛eOn
 >
TIME_NO_VEHICLE
)

306 
ucCurVehi˛es
++;

307 
dwTickVehi˛eOn
 = 
dwTickCuºít
;

312 
nRód
 = 
	`ªad
(
rs485_fd
, 
rx_buff
, (rx_buff)-1);

313 i‡(4 =
nRód
) {

314 
dwTickC¨d
 = 
dwTickCuºít
;

315 
dwCurC¨dNo
 = 
rx_buff
[0];

316 
dwCurC¨dNo
 <<= 8;

317 
dwCurC¨dNo
 +
rx_buff
[1];

318 
dwCurC¨dNo
 <<= 8;

319 
dwCurC¨dNo
 +
rx_buff
[2];

320 
dwCurC¨dNo
 <<= 8;

321 
dwCurC¨dNo
 +
rx_buff
[3];

322 
ucC¨dAckFœg
 = 0;

326 i‡(
dwTickCuºít
 - 
dwTickHóπbótReq
 >
TIME_HEART_BEAT
) {

327 
HóπBótReq_T
 
tReq
;

328 
	`INIT_MSG
(
tReq
,
HEART_BEAT_REQ
);

329 
	`SídMesßge
(&
tReq
, 
sockfd
);

330 
dwTickHóπbótReq
 = 
dwTickCuºít
;

333 if(
dwTickCuºít
 - 
dwTickTimî
 >
TIMER_BASE
 ) {

334 
	`FlushS¸ìn
();

335 
dwTickTimî
=
dwTickCuºít
;

338 i‡(
dwTickCuºít
 -
dwG©eO≥nReq
 >
TIME_GATE_OPEN
)

339 
	`excuã_cmd
(
LORD_UP_OFF
);

341 i‡(
dwTickCuºít
 - 
dwTickHóπbótAck
 <
LINK_FAIL_TIMER
) {

343 i‡(!
ucRe£tAckFœg
 && (
dwTickCuºít
 - 
dwTickRe£tReq
 >
TIME_RESET
)) {

344 
Re£tReq_T
 
tReq
;

345 
	`INIT_MSG
(
tReq
,
RESET_REQ
);

346 
	`SídMesßge
(&
tReq
,
sockfd
);

347 
dwTickRe£tReq
 = 
dwTickCuºít
;

350 i‡((
dwTickCuºít
 - 
dwTickVehi˛eOn
 <
TIME_SUBSCRIBER
)

351 && (
dwTickCuºít
 - 
dwTickVehi˛eReq
 >
TIME_VP_REQ
)

352 && (
ucCurVehi˛es
 !
ucAckVehi˛es
)){

353 
Vehi˛ePª£¡Req_T
 
tReq
;

354 
	`INIT_MSG
(
tReq
,
VEHICLE_PRESENT_REQ
);

355 
tReq
.
ucTønsId
 = 
ucCurVehi˛es
;

356 
	`SídMesßge
(&
tReq
,
sockfd
);

357 
dwTickVehi˛eReq
 = 
dwTickCuºít
;

360 i‡(
g_c⁄fig
.
ªp‹tÊag
 =
REPORTTRUE


361 && (
dwTickCuºít
 - 
dwTickC¨d
 <
TIME_SUBSCRIBER
)

362 && (
dwTickCuºít
 - 
dwTickC¨dReq
 >
TIME_CP_REQ
)

363 && (0 =
ucC¨dAckFœg
)){

364 
C¨dPª£¡Req_T
 
tReq
;

365 
	`INIT_MSG
(
tReq
,
CARD_PRESENT_REQ
);

366 
tReq
.
dwC¨dNo
 = 
dwCurC¨dNo
;

367 
	`SídMesßge
(&
tReq
,
sockfd
);

368 
dwTickC¨dReq
 = 
dwTickCuºít
;

374 i‡((
dwTickCuºít
 - 
dwTickC¨d
 <
TIME_SUBSCRIBER
)

375 && (
dwTickCuºít
 - 
dwTickVehi˛eOn
 <
TIME_SUBSCRIBER
)

376 && (
dwTickCuºít
 - 
dwTickC¨dReq
 >
TIME_CP_REQ
)

377 && (0 =
ucC¨dAckFœg
)){

378 
C¨dPª£¡Req_T
 
tReq
;

379 
	`INIT_MSG
(
tReq
,
CARD_PRESENT_REQ
);

380 
tReq
.
dwC¨dNo
 = 
dwCurC¨dNo
;

381 
	`SídMesßge
(&
tReq
,
sockfd
);

382 
dwTickC¨dReq
 = 
dwTickCuºít
;

387 i‡(
s_dwOffRec‹d
) {

388 
OffLöeTønsReq_T
 
tReq
;

389 
tm
 *
pTm
;

390 
	`INIT_MSG
(
tReq
,
OFFLINE_TRAN_REQ
);

391 
tReq
.
ucTønsId
 = 
ucOffTønID
;

392 
tReq
.
dwC¨dNo
 = 
s_tOffRec‹d
[
s_dwOffRec‹d
-1].dwCardNo;

393 
pTm
 = 
	`gmtime
((
time_t
*)&
s_tOffRec‹d
[
s_dwOffRec‹d
-1].
iSec
);

394 
tReq
.
tTime
.
ucYór
 = 
pTm
->
tm_yór
 - 100;

395 
tReq
.
tTime
.
ucM⁄th
 = 
pTm
->
tm_m⁄
;

396 
tReq
.
tTime
.
ucDay
 = 
pTm
->
tm_mday
;

397 
tReq
.
tTime
.
ucHour
 = 
pTm
->
tm_hour
;

398 
tReq
.
tTime
.
ucMöuã
 = 
pTm
->
tm_mö
;

399 
tReq
.
tTime
.
ucSec⁄d
 = 
pTm
->
tm_£c
;

400 
	`SídMesßge
(&
tReq
,
sockfd
);

404 if(
g_c⁄fig
.
©uoÊag
==
ATUOTRUE
)

406 i‡((
dwTickCuºít
 - 
dwTickC¨d
 <
TIME_SUBSCRIBER
)

407 && (
dwTickCuºít
 - 
dwTickVehi˛eOn
 <
TIME_SUBSCRIBER
)

408 && (
ucCurVehi˛es
 !
ucAckVehi˛es
)){

409 
Subs¸ibî_T
 *
pSubs¸ibî
;

411 
ucAckVehi˛es
 = 
ucCurVehi˛es
;

412 
pSubs¸ibî
 = 
	`GëSubs¸ibî
(
dwCurC¨dNo
);

413 i‡(
pSubs¸ibî
 && (pSubs¸ibî->
ucFœgs
 & 
CARD_VAL_MASK
)

414 && !(
pSubs¸ibî
->
ucFœgs
 & 
CARD_TMP_MASK
)) {

415 
timevÆ
 
tv
;

416 
timez⁄e
 
tz
;

418 
	`gëtimeofday
(&
tv
, &
tz
);

419 i‡(
s_dwOffRec‹d
 < 
MAX_OFF_RECORD
) {

420 
s_tOffRec‹d
[
s_dwOffRec‹d
].
dwC¨dNo
 = 
dwCurC¨dNo
;

421 
s_tOffRec‹d
[
s_dwOffRec‹d
].
iSec
 = 
tv
.
tv_£c
;

422 
s_dwOffRec‹d
++;

424 
dwG©eO≥nReq
 = 
dwTickCuºít
;

425 
	`excuã_cmd
(
LORD_UP_ON
);

432 
nRód
 = 
	`ªcv
(
sockfd
, 
rx_buff
, ‘x_buff)-1, 
MSG_DONTWAIT
);

433 i‡(
nRód
 <= 0)

435 if(
A1_ERROR_OK
 !
	`A1Decode
(
rx_buff
, 
nRód
, &
tA1Msg
))

437 
tA1Msg
.
tHótBót
.
ucTy≥
) {

439 
LIST_VERSION_INQ
: {

440 
Li°VîR•_T
 
tAck
;

441 
	`INIT_MSG
(
tAck
,
LIST_VERSION_RSP
);

442 
tAck
.
dwLi°Vîsi⁄
 = 
	`GëLi°Vîsi⁄
();

443 
	`SídMesßge
(&
tAck
,
sockfd
);

446 
LIST_VERSION_REQ
: {

447 
Li°VîAck_T
 
tAck
;

448 
	`SëLi°Vîsi⁄
(((
Li°Vîsi⁄Req_T
*)&
tA1Msg
)->
dwLi°Vîsi⁄
);

449 
	`RebuûdLi°
();

450 
	`WrôeLi°ToFûe
();

451 
	`INIT_MSG
(
tAck
,
LIST_VERSION_ACK
);

452 
	`SídMesßge
(&
tAck
,
sockfd
);

455 
LIST_RESET_REQ
: {

456 
Li°Re£tAck_T
 
tAck
;

457 
	`Re£tLi°
();

458 
	`INIT_MSG
(
tAck
,
LIST_RESET_ACK
);

459 
	`SídMesßge
(&
tAck
,
sockfd
);

462 
LIST_MODIFY_REQ
: {

463 
iTmp
;

464 
Li°ModifyAck_T
 
tAck
;

465 
C¨dInfo_T
 *
pC¨dInfo
;

466 
pC¨dInfo
 = ((
Li°ModifyReq_T
*)&
tA1Msg
)->
tC¨dInfo
;

467 
iTmp
 = 0; iTm∞< ((
Li°ModifyReq_T
*)&
tA1Msg
)->
ucRec‹dNum
; iTmp++)

468 
	`ModifySubs¸ibî
(
pC¨dInfo
[
iTmp
].
dwC¨dNo


469 ,
pC¨dInfo
[
iTmp
].
ucVÆid


470 ,
pC¨dInfo
[
iTmp
].
ucTmp
);

471 
	`INIT_MSG
(
tAck
,
LIST_MODIFY_ACK
);

472 
	`SídMesßge
(&
tAck
,
sockfd
);

477 
HEART_BEAT_REQ
: {

479 
HóπBótAck_T
 
tAck
;

480 
	`mem£t
(&
tAck
, 0, (tAck));

481 
tAck
.
ucVîsi⁄
 = 0x10;

482 
tAck
.
ucSour˚
 = 
g_c⁄fig
.ucSource;

483 
tAck
.
ucTy≥
 = 
HEART_BEAT_ACK
;

484 
	`SídMesßge
(&
tAck
,
sockfd
);

487 
HEART_BEAT_ACK
:

488 
dwTickHóπbótAck
 = 
dwTickCuºít
;

490 
RESET_ACK
:

491 
ucRe£tAckFœg
 = 1;

494 
SET_CLOCK_REQ
: {

495 
timevÆ
 
tv
;

496 
timez⁄e
 
tz
;

497 
tm
Åm;

498 
SëClockReq_T
 *
pReq
 = (SëClockReq_T*)&
tA1Msg
;

499 
SëClockAck_T
 
tAck
;

501 
	`gëtimeofday
(&
tv
, &
tz
);

502 
	`mem£t
(&
tm
, 0, (tm));

503 
tm
.
tm_yór
 = 100 + 
pReq
->
tTime
.
ucYór
;

504 
tm
.
tm_m⁄
 = 
pReq
->
tTime
.
ucM⁄th
;

505 
tm
.
tm_mday
 = 
pReq
->
tTime
.
ucDay
;

506 
tm
.
tm_hour
 = 
pReq
->
tTime
.
ucHour
;

507 
tm
.
tm_mö
 = 
pReq
->
tTime
.
ucMöuã
;

508 
tm
.
tm_£c
 = 
pReq
->
tTime
.
ucSec⁄d
;

509 
tv
.
tv_£c
 = 
	`mktime
(&
tm
);

510 
	`£âimeofday
(&
tv
, &
tz
);

511 
	`INIT_MSG
(
tAck
,
SET_CLOCK_ACK
);

512 
	`SídMesßge
(&
tAck
,
sockfd
);

515 
CARD_PRESENT_ACK
:

517 
ucC¨dAckFœg
 = 1;

519 
VEHICLE_PRESENT_ACK
:

520 
ucAckVehi˛es
 = ((
Vehi˛ePª£¡Ack_T
*)&
tA1Msg
)->
ucTønsId
;

522 
GATE_OPEN_REQ
: {

523 
HóπBótAck_T
 
tAck
;

524 
dwG©eO≥nReq
 = 
dwTickCuºít
;

525 
	`excuã_cmd
(
LORD_UP_ON
);

526 
	`INIT_MSG
(
tAck
,
GATE_OPEN_ACK
);

527 
	`SídMesßge
(&
tAck
,
sockfd
);

530 
LED_SHOW_REQ
: {

531 
LedShowAck_T
 
tAck
;

532 
	`Di•œy
(((
LedShowReq_T
*)&
tA1Msg
)->
szShow
);

533 
	`INIT_MSG
(
tAck
,
LED_SHOW_ACK
);

534 
	`SídMesßge
(&
tAck
,
sockfd
);

537 
OFFLINE_TRAN_ACK
:

538 i‡(
ucOffTønID
 =((
OffLöeTønsAck_T
*)&
tA1Msg
)->
ucTønsId
) {

539 
ucOffTønID
++;

540 i‡(
s_dwOffRec‹d
)

541 
s_dwOffRec‹d
--;

550 
	`˛o£
(
rs485_fd
);

551 
	}
}

	@misc.c

8 
	~<°rög.h
>

9 
	~<sys/time.h
>

10 
	~"l‹dweb.h
"

11 
	~"misc.h
"

14 
	$excuã_cmd
(
iCmd
)

16 
fd
;

18 
fd
 = 
	`›í
("/dev/Lord-Control", 0);

19 i‡(
fd
 < 0) {

20 
	`≥º‹
("open device Lord-Control");

23 
	`io˘l
(
fd
, 
LORD_IO_WRITE
, 
iCmd
);

24 
	`˛o£
(
fd
);

25 
	}
}

27 
	$ã°_vd108
()

29 
fd
;

30 
rv
;

32 
fd
 = 
	`›í
("/dev/Lord-Control", 0);

33 i‡(
fd
 < 0) {

34 
	`≥º‹
("open device Lord-Control");

37 
rv
 = 
	`io˘l
(
fd
, 
LORD_VEHICLE_STAT
, 0);

38 
	`˛o£
(
fd
);

39  
rv
;

40 
	}
}

45 
	$GëTicks
()

47 
dwTicks
;

48 
timevÆ
 
tv
;

49 
timez⁄e
 
tz
;

51 
	`gëtimeofday
 (&
tv
 , &
tz
);

52 
dwTicks
 = 
tv
.
tv_£c
 * 1000 +Åv.
tv_u£c
/1000;

53  
dwTicks
;

54 
	}
}

	@misc.h

1 #i‚de‡
_MISC_H_


2 
	#_MISC_H_


	)

4 
excuã_cmd
(
iCmd
);

5 
ã°_vd108
();

6 
GëTicks
();

	@rs485.c

9 
	~<ãrmios.h
>

10 
	~<f˙é.h
>

11 
	~<uni°d.h
>

12 
	~"l‹dweb.h
"

17 
	$›í_p‹t
(
p‹t_no
)

19 
fd
;

20 *
dev
[] = {"/dev/ribeto_serial0","/dev/ribeto_serial1","/dev/ribeto_serial2"};

22 i‡((
p‹t_no
 < 0) || (port_no > 2))

25 
fd
 = 
	`›í
(
dev
[
p‹t_no
],
O_RDWR
|
O_NDELAY
);

27 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
) < 0) {

28 
	`≥º‹
("fcntl failure!\n");

29 
	`˛o£
(
fd
);

37  
fd
;

38 
	}
}

41 
	$£t_›t
(
fd
, 
nBôs
, 
nS≥ed
, 
nEvít
, 
nSt›
)

43 
ãrmios
 
ãrm_öfo
;

44 
•ìd_t
 
•ìd
;

46 i‡(
	`tcgë©å
(
fd
, &
ãrm_öfo
) != 0) {

47 
	`≥º‹
("Setup serial !\n");

52 
ãrm_öfo
.
c_cÊag
 |
CLOCAL
 | 
CREAD
;

53 
ãrm_öfo
.
c_cÊag
 &~
CSIZE
;

54 
nBôs
) {

56 
ãrm_öfo
.
c_cÊag
 |
CS5
;

59 
ãrm_öfo
.
c_cÊag
 |
CS6
;

62 
ãrm_öfo
.
c_cÊag
 |
CS7
;

65 
ãrm_öfo
.
c_cÊag
 |
CS8
;

72 i‡((
nEvít
 == 'O') || (nEvent == 'o')) {

73 
ãrm_öfo
.
c_cÊag
 |
PARENB
;

74 
ãrm_öfo
.
c_cÊag
 |
PARODD
;

75 
ãrm_öfo
.
c_iÊag
 |
INPCK
;

77 i‡((
nEvít
 == 'E') || (nEvent == 'e')) {

78 
ãrm_öfo
.
c_cÊag
 |
PARENB
;

79 
ãrm_öfo
.
c_cÊag
 &~
PARODD
;

80 
ãrm_öfo
.
c_iÊag
 |
INPCK
;

82 i‡((
nEvít
 == 'N') || (nEvent == 'n')) {

83 
ãrm_öfo
.
c_cÊag
 &~
PARENB
;

84 
ãrm_öfo
.
c_iÊag
 &~
INPCK
;

87 
nS≥ed
) {

89 
•ìd
 = 
B1200
;

92 
•ìd
 = 
B2400
;

95 
•ìd
 = 
B4800
;

98 
•ìd
 = 
B9600
;

101 
•ìd
 = 
B19200
;

104 
•ìd
 = 
B38400
;

107 
•ìd
 = 
B57600
;

110 
•ìd
 = 
B115200
;

116 
	`cf£ti•ìd
(&
ãrm_öfo
,
•ìd
);

117 
	`cf£to•ìd
(&
ãrm_öfo
,
•ìd
);

120 i‡(1 =
nSt›
)

121 
ãrm_öfo
.
c_cÊag
 &~
CSTOPB
;

122 i‡(2 =
nSt›
)

123 
ãrm_öfo
.
c_cÊag
 |
CSTOPB
;

128 
ãrm_öfo
.
c_cÊag
 &~
CRTSCTS
;

130 
ãrm_öfo
.
c_iÊag
 &=~(
IXON
 | 
IXOFF
 | 
IXANY
);

132 
ãrm_öfo
.
c_lÊag
 &=~(
ICANON
 | 
ECHO
 | 
ECHOE
 | 
ISIG
);

134 
ãrm_öfo
.
c_oÊag
 &=~
OPOST
;

136 
ãrm_öfo
.
c_cc
[
VTIME
] = 0;

137 
ãrm_öfo
.
c_cc
[
VMIN
] = 0;

138 
ãrm_öfo
.
c_iÊag
 |
IGNPAR
|
ICRNL
;

141 
	`tcÊush
(
fd
,
TCIFLUSH
);

142 i‡(
	`tc£èâr
(
fd
, 
TCSANOW
, &
ãrm_öfo
) != 0)

144 
	}
}

	@ulist.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~"Uli°.h
"

12 
	gs_ucCÀ™Fœg
 = 0;

13 
	gs_dwLi°Vîsi⁄
;

14 
	gs_dwSubs¸ibîs
;

15 
Subs¸ibî_T
 
	gs_tSubs¸ibî
[
MAX_SUBSCRIBER
];

18 
	$RódLi°FromFûe
()

20 
FILE
 *
pFûe
;

21 
rv
;

23 
	`Re£tLi°
();

24 
pFûe
 = 
	`f›í
("ulist.dat", "rb");

25 i‡(
pFûe
 == 0)

28 
rv
 = 0;

29 i‡(!
	`„of
(
pFûe
))

30 
	`‰ód
(&
s_dwLi°Vîsi⁄
, (), 1, 
pFûe
);

32 
rv
 = -1;

33 !
	`„of
(
pFûe
)) {

34 i‡(
s_dwSubs¸ibîs
 >
MAX_SUBSCRIBER
)

36 i‡(
	`‰ód
(&
s_tSubs¸ibî
[
s_dwSubs¸ibîs
].
dwC¨dNo
,

37 (
s_tSubs¸ibî
[0].
dwC¨dNo
), 1, 
pFûe
) <= 0)

39 i‡(
	`‰ód
(&
s_tSubs¸ibî
[
s_dwSubs¸ibîs
].
ucFœgs
,

40 (
s_tSubs¸ibî
[0].
ucFœgs
), 1, 
pFûe
) <= 0)

42 
s_dwSubs¸ibîs
++;

45 
	`f˛o£
(
pFûe
);

46  
rv
;

47 
	}
}

49 
	$GëLi°Vîsi⁄
()

51  
s_dwLi°Vîsi⁄
;

52 
	}
}

54 
	$SëLi°Vîsi⁄
(
dwVîsi⁄New
)

56 
s_dwLi°Vîsi⁄
 = 
dwVîsi⁄New
;

57 
	}
}

59 
	$Re£tLi°
()

61 
s_dwLi°Vîsi⁄
 = -1;

62 
s_dwSubs¸ibîs
 = 0;

63 
s_ucCÀ™Fœg
 = 1;

64 
	}
}

67 
	$WrôeLi°ToFûe
()

69 
FILE
 *
pFûe
;

70 
dw1
;

72 
pFûe
 = 
	`f›í
("ulist.dat", "wb+");

73 i‡(
pFûe
 == 0)

76 
	`fwrôe
(&
s_dwLi°Vîsi⁄
, (), 1, 
pFûe
);

77 i‡(
s_dwSubs¸ibîs
 > 
MAX_SUBSCRIBER
)

78 
s_dwSubs¸ibîs
 = 
MAX_SUBSCRIBER
;

79 
dw1
 = 0; dw1 < 
s_dwSubs¸ibîs
; dw1++) {

80 
	`fwrôe
(&
s_tSubs¸ibî
[
dw1
].
dwC¨dNo
,

81 (
s_tSubs¸ibî
[0].
dwC¨dNo
), 1, 
pFûe
);

82 
	`fwrôe
(&
s_tSubs¸ibî
[
dw1
].
ucFœgs
,

83 (
s_tSubs¸ibî
[0].
ucFœgs
), 1, 
pFûe
);

85 
	`f˛o£
(
pFûe
);

87 
	}
}

89 
Subs¸ibî_T
* 
	$GëSubs¸ibî
(
dwC¨dNo
)

91 
dw1
;

92 
Subs¸ibî_T
 *
pSubs¸ibî
;

94 
pSubs¸ibî
 = 
s_tSubs¸ibî
;

95 
dw1
 = 0; dw1 < 
s_dwSubs¸ibîs
; dw1++) {

96 i‡(
pSubs¸ibî
->
dwC¨dNo
 == dwCardNo)

97  
pSubs¸ibî
;

98 
pSubs¸ibî
++;

102 
	}
}

104 
	$RebuûdLi°
()

106 
dwTmp
;

107 
Subs¸ibî_T
 *
pSubs¸ibî1
;

108 
Subs¸ibî_T
 *
pSubs¸ibî2
;

109 
dw2
;

111 i‡(
s_ucCÀ™Fœg
)

114 
s_ucCÀ™Fœg
 = 1;

116 
pSubs¸ibî2
 = 
s_tSubs¸ibî
;

117 
dwTmp
 = 0;

118 
pSubs¸ibî1
 = 
s_tSubs¸ibî
;ÖSubs¸ibî1 !s_tSubs¸ibî + 
s_dwSubs¸ibîs
;ÖSubscriber1++) {

119 0 =(
pSubs¸ibî1
->
ucFœgs
 & 
CARD_VAL_MASK
)) {

120 
pSubs¸ibî1
++;

121 i‡(
pSubs¸ibî1
 =
s_tSubs¸ibî
 + 
s_dwSubs¸ibîs
)

124 i‡(
pSubs¸ibî1
 =
s_tSubs¸ibî
 + 
s_dwSubs¸ibîs
)

126 i‡(
pSubs¸ibî2
 !
pSubs¸ibî1
)

127 
	`mem˝y
(
pSubs¸ibî2
, 
pSubs¸ibî1
, (
Subs¸ibî_T
));

128 
pSubs¸ibî2
++;

129 
dwTmp
++;

131 
s_dwSubs¸ibîs
 = 
dwTmp
;

132 
	}
}

135 
	$ModifySubs¸ibî
(
dwC¨dNo
, 
ucVÆid
, 
ucTmp
)

137 
Subs¸ibî_T
 *
pSubs¸ibî
;

138 
pSubs¸ibî
 = 
	`GëSubs¸ibî
(
dwC¨dNo
);

140 i‡((0 !
ucVÆid
Ë&& (0 =
pSubs¸ibî
)) {

142 i‡(
s_dwSubs¸ibîs
 >
MAX_SUBSCRIBER
)

143 
	`RebuûdLi°
();

144 i‡(
s_dwSubs¸ibîs
 >
MAX_SUBSCRIBER
)

146 
pSubs¸ibî
 = &
s_tSubs¸ibî
[
s_dwSubs¸ibîs
];

147 
s_dwSubs¸ibîs
++;

148 
pSubs¸ibî
->
dwC¨dNo
 = dwCardNo;

149 
s_ucCÀ™Fœg
 = 0;

151 i‡(
pSubs¸ibî
) {

152 i‡(
ucVÆid
)

153 
pSubs¸ibî
->
ucFœgs
 |
CARD_VAL_MASK
;

155 
pSubs¸ibî
->
ucFœgs
 &~
CARD_VAL_MASK
;

156 
s_ucCÀ™Fœg
 = 0;

158 i‡(
ucTmp
)

159 
pSubs¸ibî
->
ucFœgs
 |
CARD_TMP_MASK
;

161 
pSubs¸ibî
->
ucFœgs
 &~
CARD_TMP_MASK
;

164 
	}
}

	@
1
.
0
11
92
Ulist.h
codec.c
codec.h
display.c
dumplist.c
lordweb.h
main.c
misc.c
misc.h
rs485.c
ulist.c
